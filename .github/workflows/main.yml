# Copyright (C) 2023 Frachtwerk GmbH, Leopoldstra√üe 7C, 76133 Karlsruhe.
#
# This file is part of essencium-backend.
#
# essencium-backend is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# essencium-backend is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with essencium-backend. If not, see <http://www.gnu.org/licenses/>.

name: Essencium CI - Main

on:
  push:
    branches:
      - master
      - main

concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: true

env:
  SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"

jobs:
  compile-main:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - run: mvn -f pom.xml compile
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend
          retention-days: 1
          path: "./essencium-backend/target/*"

  unit-tests:
    needs: compile-main
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - run: mvn test jacoco:prepare-agent surefire:test jacoco:report -Dskip.integration.tests -Djacoco.destFile=exportJacoco/jacoco-unit.exec
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-tests-jacoco
          path: essencium-backend/exportJacoco/jacoco-unit.exec

  integration-tests:
    needs: compile-main
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - run: mvn test jacoco:prepare-agent-integration failsafe:integration-test jacoco:report-integration -Dskip.unit.tests -Djacoco.destFile=exportJacoco/jacoco-integration.exec
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-tests-jacoco
          path: essencium-backend/exportJacoco/jacoco-integration.exec

  merge-jacoco-report:
    name: Jacoco Merge Results
    needs:
      - unit-tests
      - integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: integration-tests-jacoco
          path: essencium-backend/target/
      - uses: actions/download-artifact@v3
        with:
          name: unit-tests-jacoco
          path: essencium-backend/target/
      - name: merge results
        run: mvn jacoco:merge package jacoco:report -DskipTests=true -Dskip.unit.tests -Dskip.integration.tests -Dmaven.source.skip verify -Dgpg.skip=true
        working-directory: essencium-backend
      - name: Upload jacoco coverage despite the check result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-results-report
          path: essencium-backend/target/site/jacoco/
          if-no-files-found: error

  trivy-repo-scan:
    needs:
      - compile-main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './essencium-backend'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,CRITICAL,HIGH'
      # Only available with GitHub Advanced Security
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

#  test-identity-model:
#  test-sequence-model:
#  test-uuid-model:

  build-development-demo:
    needs:
      - compile-main
      - integration-tests
      - unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend
          path: essencium-backend/target/
      - run: mvn install -Dmaven.test.skip=true -Dgpg.skip=true
      - run: mvn package
        working-directory: essencium-backend-development
      - run: cd essencium-backend-development/target && rm *-javadoc.jar && rm *-sources.jar && java -Djarmode=layertools -jar *.jar extract
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend-development
          retention-days: 1
          path: essencium-backend-development/target/*

  docker-build-and-publish-development-demo:
    needs: build-development-demo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set POM version env variable
        run: echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
        working-directory: essencium-backend-development
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-development
          path: essencium-backend-development/target/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./essencium-backend-development/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/frachtwerk/essencium-backend-development:${{ env.POM_VERSION }}-${{ github.sha }}

  #  sonarqube:
  #    needs:
  #      - compile
  #      - unit-tests
  #      - integration-tests
  #    runs-on: ubuntu-latest
  #    container:
  #      image: maven:3-openjdk-17-slim
  #    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }} || ${{ github.event.pull_request.number }} == null
  #    timeout-minutes: 60
  #    env:
  #      MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
  #      GIT_DEPTH: 1000
  #    steps:
  #      - uses: actions/checkout@v3.5.0
  #        with:
  #          fetch-depth: 1000
  #      - uses: actions/cache@v3.3.1
  #        with:
  #          path: ".m2/repository"
  #          key: "${{ github.ref }}"
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: compile
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: unit-tests
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: integration-tests
  #      - run: cd ./essencium-backend
  #      - run: mvn sonar:sonar -D sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml,target/site/jacoco-it/jacoco.xml -D sonar.junit.reportPaths=target/surefire-reports,target/failsafe-reports -D sonar.tests=src/test,src/testIntegration -D sonar.branch.name=${{ github.ref }} -D sonar.qualitygate.wait=false

  #  sonarqube_merge_request:
  #    needs:
  #      - compile
  #      - unit-tests
  #      - integration-tests
  #    runs-on: ubuntu-latest
  #    container:
  #      image: maven:3-openjdk-17-slim
  #    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }} || ${{ github.event.pull_request.number }}
  #    timeout-minutes: 60
  #    env:
  #      MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
  #      GIT_DEPTH: 1000
  #    steps:
  #      - uses: actions/checkout@v3.5.0
  #        with:
  #          fetch-depth: 1000
  #      - uses: actions/cache@v3.3.1
  #        with:
  #          path: ".m2/repository"
  #          key: "${{ github.ref }}"
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: compile
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: unit-tests
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: integration-tests
  #      - run: cd ./essencium-backend
  #      - run: mvn sonar:sonar -D sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml,target/site/jacoco-it/jacoco.xml -D sonar.junit.reportPaths=target/surefire-reports,target/failsafe-reports -D sonar.tests=src/test,src/testIntegration -D sonar.pullrequest.key=${{ github.event.pull_request.number }} -D sonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} -D sonar.pullrequest.base=${{ github.event.pull_request.base.ref }} -D sonar.qualitygate.wait=false

  #  dep-track-backend:
  #    needs:
  #      - unit-tests
  #      - integration-tests
  #    runs-on: ubuntu-latest
  #    container:
  #      image: maven:3-openjdk-17-slim
  #    if: # Unable to map conditional expression to GitHub Actions equivalent
  #    #         ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }} || ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH
  #    timeout-minutes: 60
  #    env:
  #      MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
  #    steps:
  #      - uses: actions/checkout@v3.5.0
  #        with:
  #          fetch-depth: 50
  #      - uses: actions/cache@v3.3.1
  #        with:
  #          path: ".m2/repository"
  #          key: "${{ github.ref }}-mvn"
  #      - uses: actions/download-artifact@v3.0.1
  #      - run: cd ./essencium-backend
  #      - run: mvn cyclonedx:makeBom
  #      - run: |
  #          curl --location --request POST  "$DTRACK_API_HOST/api/v1/bom" \
  #          --header "X-API-Key: $DTRACK_API_TOKEN" \
  #          --form "autoCreate=\"true\"" \
  #          --form "projectName=essencium-backend-${{ github.repository }}" \
  #          --form "projectVersion=$VERSION" \
  #          --form "bom=@\"target/bom.json\""


